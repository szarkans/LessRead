import ollama
from time import sleep

def main():
    """
    Основная функция запуска кода, проверяет наличие нужной модели LLM.
    Если модель скачана - запускает следующий шаг.
    """

    # Выводим приветственное сообщение и красивое лого LessRead™
    print("Вас приветствует...")
    sleep(0.5)
    print("  _                   _____                _ ")
    sleep(0.5)
    print(" | |                 |  __ \              | |")
    sleep(0.5)
    print(" | |     ___  ___ ___| |__) |___  __ _  __| |")
    sleep(0.5)
    print(" | |    / _ \/ __/ __|  _  // _ \/ _` |/ _` |")
    sleep(0.5)
    print(" | |___|  __/\__ \__ \ | \ \  __/ (_| | (_| |")
    sleep(0.5)
    print(" |______\___||___/___/_|  \_\___|\__,_|\__,_|")
    sleep(0.5)
    print("Сначала проверю конфигурацию...")

    # Здесь код проверяет, установлена ли нужная модель нейросети
    try:
        llm_list = ollama.list()
    except Exception as error:
        print("Ой-ёй! Вы не запустили ollama! Запустите ollama с помощью команды ollama serve.")
        return
    else:
        if len(llm_list) < 1:
            # Если нет - говорим об этом и пытаемся скачать её
            print("Ой-ёй! Вы не установили LLM модель для Ollama!")
            print("Попытаюсь это сделать за вас...")
            try:
                ollama.pull('llama3.1:8b')
            except Exception as error:
                # Если не получилось скачать - пользователю нужно скачать её самостоятельно
                print(f"У меня не получилось... Вот ошибка: {error}")
                print("Пожалуйста скачайте модель самостоятельно, написав команду ollama pull llama3.1:8b в Терминале.")
                return
            else:
                print("Успешно скачал llama3.1:8b!")
        print("Всё хорошо!")
        # Переходим на следующий шаг
        step_2()

def step_2():
    """
    Второй шаг. Здесь мы спрашиваем какой режим хочет пользователь:
    - Сократить до двух предложений
    - Сократить до короткого абзаца
    Принимает значение либо 1 либо 2, если что-то другое - помечает на ошибку и просит ввести ответ заново
    """
    print("=========================================================================")
    print("Какой режим сокращения пожелаете? Для выбора впишите ТОЛЬКО нужную цифру!")
    print("[1]. До двух предложений")
    print("[2]. Сократить до абзаца")
    # Спрашиваем пользователя какой режим он хочет
    mode = input("Ваш выбор: ")
    # Если пользователь ввёл 1 или 2, продолжаем
    if str(mode) == "1" or mode == "2":
        step_3(mode)
    # Если ввёл что-то другое - указываем на ошибку и запускаем шаг заново
    else:
        print("Извините, вы ввели не цифру. Введите ТОЛЬКО цифру режима!")
        step_2()
        return

def step_3(mode):
    """
    Третий шаг, здесь мы принимаем текст пользователя.
    """
    print("=========================================================================")
    print("Отлично! Теперь введите текст, который хотите сократить.")
    text = input("Ваш текст: ")
    # Если в тексте меньше 100 символов (одно-два предложений), то не сокращаем его.
    if len(text) < 100:
        print("Это слишком маленький текст! Нужен текст по объёмнее.")
        step_3(mode)
        return
    else:
        print("Начинаю генерацию текста!")
        shorten_text(mode, text)

def shorten_text(mode, text):
    """
    Четвертый шаг, здесь мы уже сокращаем текст и выводим его по кускам.
    """
    print("=========================================================================")
    prompt = ""
    # Смотрим какой режим выбрал пользователь
    # Если 1, то пишем нейросети чтобы сократила текст до двух предложений
    # Промпт (запрос) на английском, т.к. нейросети лучше всего работают с английским языком
    if mode == "1":
        prompt = ("Task: Shorten this text to two sentences using the language of the text. Don't output anything, but shorten text\n"
                  f"Text: {text}")
    # Если 2, то пишем нейросети чтобы сократила текст до короткого абзаца.
    # Промпт (запрос) на английском, т.к. нейросети лучше всего работают с английским языком
    elif mode == "2":
        prompt = ("Task: Shorten this text using the language of the text. Don't output anything, but shorten text\n"
                  f"Text: {text}")
    else:
        print("Выбран неправильный режим...")
        return

    # Отправляем запрос нейросети с выбранным режимом
    stream = ollama.chat(
        model='llama3.1:8b',
        messages=[{'role': 'user', 'content': prompt}],
        stream=True,
    )

    # Данные две строчки позволяют выводить текст порционно, как в ChatGPT.
    # Выглядит красиво
    for i in stream:
        print(i['message']['content'], end='', flush=True)

    print("\n=========================================================================")
    # Спрашиваем хочет ли пользователь перезапустить программу
    print("Желаете повторить? Да/Нет")
    restart = input("Ваш ответ: ")
    if restart.lower() == 'да':
        # Если да - запускаем её заново, но со второго шага, без приветственного сообщения
        step_2()
    elif restart.lower() == 'нет':
        # Если нет - закрываем программу
        print("Спасибо что воспользовались LessRead™!")
        return
    else:
        # Если ни "да" ни "нет", то закрываем программу
        return

# Запускаем код
main()